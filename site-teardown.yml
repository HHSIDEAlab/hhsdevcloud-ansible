---
# PERMANENTLY DESTROYS all AWS resources. Completely, 100% non-recoverable. 
# Use only with caution!
#
# Usage:
#  
#     $ ansible-playbook -i ec2.py site-teardown.yml --extra-vars "env={ test | production }"
 
- hosts: tag_environment_{{ env }}
  name: AWS - Terminate EC2 Instances
  gather_facts: false
  
  # EC2 Operations must be run locally (where the API is available)
  connection: local  
  
  vars: 
    - region: 'us-east-1'
    
    # This variable must be specified on the command line:
    # - env: { test | production }

  tasks:
    
    # Disabled due to spam, but can be used to log all inventory data about 
    # each instance being terminated:
    # - debug: var=hostvars[inventory_hostname]
    
    - name: Instances to Terminate - List
      debug: msg="EC2 Name - {{ hostvars[inventory_hostname]['ec2_tag_Name'] }}, EC2 ID - {{ hostvars[inventory_hostname]['ec2_id'] }}"
    
    - name: Instances to Terminate - Die Die Die
      local_action: ec2
        state=absent
        instance_ids="{{ ec2_id }}"
        region="{{ region }}"
        wait=true
 
- hosts: rds
  name: AWS - Terminate RDS Instances
  gather_facts: false
  
  # EC2 Operations must be run locally (where the API is available)
  connection: local  
  
  vars: 
    - region: 'us-east-1'
    
    # This variable must be specified on the command line:
    # - env: { test | production }

  tasks:
    
    # Disabled due to spam, but can be used to log all inventory data about 
    # each instance being terminated:
    # - debug: var=hostvars[inventory_hostname]
    
    - name: Instances to Terminate - List
      debug: msg="EC2 Name - {{ hostvars[inventory_hostname]['ec2_id'] }}, EC2 ID - {{ hostvars[inventory_hostname]['ec2__address'] }}"
    
    - name: Instances to Terminate - Die Die Die
      local_action: rds
        command=delete
        instance_name="{{ ec2_id }}"
        region="{{ region }}"
        wait=true
      when: ec2_id == "{{ postgres_dev_instance_name }}"

