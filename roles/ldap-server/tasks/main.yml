---

# Contains secrets only used by this role.
- include_vars: vars/vault.yml

- name: Create debconf Config Entries for OpenLDAP
  debconf:
    name: slapd
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  with_items:
    - { question: 'slapd/domain', value: 'hhsdevcloud.us', vtype: 'string' }
    - { question: 'shared/organization', value: 'HHS IDEA Lab', vtype: 'string' }
    - { question: 'slapd/backend', value: 'HDB', vtype: 'string' }

- name: Create debconf Password Config Entries for OpenLDAP
  debconf:
    name: slapd
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  with_items:
    - { question: 'slapd/password1', value: "{{ ldap_root_password }}", vtype: 'password' }
    - { question: 'slapd/password2', value: "{{ ldap_root_password }}", vtype: 'password' }
  changed_when: false
  no_log: true

- name: Install OpenLDAP and Friends
  apt: name={{ item }} update_cache=true cache_valid_time="{{ 60 * 15 }}"
  with_items:
    - slapd
    - db-util
    - python-ldap

- name: Create Directory OUs
  ldap_entry: 
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "{{ item.dn }}"
    objectClass: "{{ item.objectClass }}"
  with_items:
    - { dn: 'ou=people,dc=hhsdevcloud,dc=us', objectClass: ['organizationalUnit'] }
    - { dn: 'ou=groups,dc=hhsdevcloud,dc=us', objectClass: ['organizationalUnit'] }
    - { dn: 'ou=services,dc=hhsdevcloud,dc=us', objectClass: ['organizationalUnit'] }

- name: Create JIRA Service User
  ldap_entry: 
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: 'cn=jira,ou=services,dc=hhsdevcloud,dc=us' 
    objectClass: ['organizationalRole', 'simpleSecurityObject']
    cn: jira
    userPassword: "{{ ldap_jira_password }}"

# Create `ou=people` entries for each `people` entry (in `../vars/main.yml`).
# Note that this module does not handles updates-- only inserts.
- name: Create User Accounts
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item.key }},ou=people,dc=hhsdevcloud,dc=us"
    objectClass: ['inetOrgPerson', 'posixAccount']
    uid: "{{ item.key }}"
    cn: "{{ item.value.givenName }} {{ item.value.sn }}"
    displayName: "{{ item.value.givenName }} {{ item.value.sn }}"
    givenName: "{{ item.value.givenName }}"
    sn: "{{ item.value.sn }}"
    uidNumber: "{{ item.value.uidAndGidNumber }}"
    gidNumber: "{{ item.value.uidAndGidNumber }}"
    loginShell: '/bin/bash'
    homeDirectory: "/home/{{ item.key }}"
    mail: "{{ item.value.mail }}"
  with_dict: "{{ people }}"
  register: ldap_entr_people

# Passwords are set in a separate task so we can use no_log on it without too much hassle.
- name: Set Initial Password for New Users
  ldap_attr:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item.key }},ou=people,dc=hhsdevcloud,dc=us"
    state: exact
    name: userPassword
    values: "{{ item.value }}"
  # Only set the password if the account has just been created, to avoid
  # overwriting passwords once users change them.
  when: ldap_entr_people.results | selectattr('item.key', 'equalto', item.key) | map(attribute='changed') | list | first
  with_dict: "{{ vault_people_initialPasswords }}"
  no_log: true

# Create `ou=groups` entries for each `people` entry (in `../vars/main.yml`).
- name: Create User Groups
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "cn={{ item.key }},ou=groups,dc=hhsdevcloud,dc=us"
    objectClass: 'posixGroup'
    cn: "{{ item.key }}"
    gidNumber: "{{ item.value.uidAndGidNumber }}"
  with_dict: "{{ people }}"

# Update email addresses, as needed.
- name: Update User Account Emails
  ldap_attr:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item.key }},ou=people,dc=hhsdevcloud,dc=us"
    state: exact
    name: mail
    values: "{{ item.value.mail }}"
  with_dict: "{{ people }}"

- name: Delete Defunct User Accounts
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item }},ou=people,dc=hhsdevcloud,dc=us"
    state: absent
  with_items: "{{ people_deleted }}"

- name: Delete Defunct User Groups
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "cn={{ item }},ou=groups,dc=hhsdevcloud,dc=us"
    state: absent
  with_items: "{{ people_deleted }}"
