---

# Contains secrets only used by this role.
- include_vars: vars/vault.yml

- name: Create debconf Config Entries for OpenLDAP
  debconf:
    name: slapd
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  with_items:
    - { question: 'slapd/domain', value: 'hhsdevcloud.us', vtype: 'string' }
    - { question: 'shared/organization', value: 'HHS IDEA Lab', vtype: 'string' }
    - { question: 'slapd/backend', value: 'HDB', vtype: 'string' }

- name: Create debconf Password Config Entries for OpenLDAP
  debconf:
    name: slapd
    question: "{{ item.question }}"
    value: "{{ item.value }}"
    vtype: "{{ item.vtype }}"
  with_items:
    - { question: 'slapd/password1', value: "{{ ldap_root_password }}", vtype: 'password' }
    - { question: 'slapd/password2', value: "{{ ldap_root_password }}", vtype: 'password' }
  changed_when: false
  no_log: true

- name: Install OpenLDAP and Friends
  apt: name={{ item }} update_cache=true cache_valid_time="{{ 60 * 15 }}"
  with_items:
    - slapd
    - db-util
    - python-ldap

# FIXME: Replace all `command` calls to `ldapmodify` once this Ansible bug is resolved:
# https://github.com/ansible/ansible/issues/30814

# Ensure that sudo/root and admin group members can modify the directory.
#
# Notes:
# * The root/sudo user is a manager of the directory, to simplify things.
# * JIRA needs write access to most things in order to:
#     * Allow users to modify their passwords in JIRA. (The `ppolicy` module
#       used here ensures this is done securely.)
#     * Allow administrators to modify group membership from within JIRA's
#       admin interface.
- name: Write LDIF to Configure Directory Permissions
  copy:
    content: |
      dn: olcDatabase={1}hdb,cn=config
      changetype: modify
      delete: olcAccess
      -
      add: olcAccess
      olcAccess: {0}to attrs=userPassword
        by self write
        by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
        by group.exact="cn=administrators-ldap,ou=groups,dc=hhsdevcloud,dc=us" manage
        by dn.exact="cn=jira,ou=services,dc=hhsdevcloud,dc=us" write
        by anonymous auth
        by * none
      olcAccess: {1}to attrs=shadowLastChange
        by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
        by group.exact="cn=administrators-ldap,ou=groups,dc=hhsdevcloud,dc=us" manage
        by dn.exact="cn=jira,ou=services,dc=hhsdevcloud,dc=us" write
        by self write
        by * read
      olcAccess: {2}to *
        by dn.exact=gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth manage
        by group.exact="cn=administrators-ldap,ou=groups,dc=hhsdevcloud,dc=us" manage
        by dn.exact="cn=jira,ou=services,dc=hhsdevcloud,dc=us" write
        by * read
    dest: /etc/ldap/ansible-olcAccess.ldif
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  become: true
  register: copy_ldif_olcAccess
- name: Run LDIF to Configure Directory Permissions
  command: /usr/bin/ldapmodify -H ldapi:/// -Y EXTERNAL -D "cn=config" -f /etc/ldap/ansible-olcAccess.ldif
  become: true
  when: copy_ldif_olcAccess.changed

# Note: We have to manually search the config to see which modules are loaded,
# because the `ldap_entry` logic isn't quite smart enough to figure that out on
# its own. (It gets confused by the indexing notation that's used.)
- name: Check OpenLDAP Config
  command: /usr/bin/ldapsearch -H ldapi:/// -Y EXTERNAL -b cn=config
  register: command_ldapsearch_config
  become: true
  changed_when: false

# Enable and configure the `ppolicy` module.
- import_tasks: ppolicy.yml

- name: Create Directory OUs
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "{{ item.dn }}"
    objectClass: "{{ item.objectClass }}"
  with_items:
    - { dn: 'ou=people,dc=hhsdevcloud,dc=us', objectClass: ['organizationalUnit'] }
    - { dn: 'ou=groups,dc=hhsdevcloud,dc=us', objectClass: ['organizationalUnit'] }
    - { dn: 'ou=services,dc=hhsdevcloud,dc=us', objectClass: ['organizationalUnit'] }

# Create `ou=people` entries for each `people` entry (in `../vars/main.yml`).
# Note that this module does not handles updates-- only inserts.
- name: Create User Accounts
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item.key }},ou=people,dc=hhsdevcloud,dc=us"
    objectClass: ['inetOrgPerson', 'posixAccount']
    uid: "{{ item.key }}"
    cn: "{{ item.value.givenName }} {{ item.value.sn }}"
    displayName: "{{ item.value.givenName }} {{ item.value.sn }}"
    givenName: "{{ item.value.givenName }}"
    sn: "{{ item.value.sn }}"
    uidNumber: "{{ item.value.uidAndGidNumber }}"
    gidNumber: "{{ item.value.uidAndGidNumber }}"
    loginShell: '/bin/bash'
    homeDirectory: "/home/{{ item.key }}"
    mail: "{{ item.value.mail }}"
  with_dict: "{{ people }}"
  register: ldap_entr_people

# Passwords are set in a separate task so we can use no_log on it without too much hassle.
- name: Set Initial Password for New Users
  ldap_attr:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item.key }},ou=people,dc=hhsdevcloud,dc=us"
    state: exact
    name: userPassword
    values: "{{ item.value }}"
  # Only set the password if the account has just been created, to avoid
  # overwriting passwords once users change them.
  when: ldap_entr_people.results | selectattr('item.key', 'equalto', item.key) | map(attribute='changed') | list | first
  with_dict: "{{ vault_people_initialPasswords }}"
  no_log: true

# Create `ou=groups` entries for each `people` entry (in `../vars/main.yml`).
- name: Create User Groups
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "cn={{ item.key }},ou=groups,dc=hhsdevcloud,dc=us"
    objectClass: 'posixGroup'
    cn: "{{ item.key }}"
    gidNumber: "{{ item.value.uidAndGidNumber }}"
  with_dict: "{{ people }}"

# Update email addresses, as needed.
- name: Update User Account Emails
  ldap_attr:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item.key }},ou=people,dc=hhsdevcloud,dc=us"
    state: exact
    name: mail
    values: "{{ item.value.mail }}"
  with_dict: "{{ people }}"

- name: Delete Defunct User Accounts
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "uid={{ item }},ou=people,dc=hhsdevcloud,dc=us"
    state: absent
  with_items: "{{ people_deleted }}"

- name: Delete Defunct User Groups
  ldap_entry:
    bind_dn: 'cn=admin,dc=hhsdevcloud,dc=us'
    bind_pw: "{{ ldap_root_password }}"
    dn: "cn={{ item }},ou=groups,dc=hhsdevcloud,dc=us"
    state: absent
  with_items: "{{ people_deleted }}"

- name: Create LDAP Administrators Group
  ldap_entry:
    dn: "cn=ldap-administrators,ou=groups,dc=hhsdevcloud,dc=us"
    objectClass: groupOfNames
    cn: ldap-administrators
    description: Specifies which users are allowed to administer LDAP.
    member: uid=karldavis,ou=people,dc=hhsdevcloud,dc=us
    member: uid=markscrimshire,ou=people,dc=hhsdevcloud,dc=us
  become: true

# Create/update the JIRA-related entries.
- import_tasks: jira_entries.yml
