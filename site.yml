---
# This playbook manages the HHS Dev Cloud's development infrastructure:
# 
# * Java Build Servers: Jenkins, SonarQube, and Nexus
# * LDAP Server: Used to centralize user accounts for other servers
# * JIRA
# * etc. ...
#
# Usage:
#  
#     $ ansible-playbook -i ec2.py site.yml --extra-vars "env={ test | production }"

- hosts: localhost
  name: AWS - Provision Resources and Instances
  connection: local
  gather_facts: false

  vars:
    - region: us-east-1
    - ec2_key_name: cms-karl
    
    # This variable must be specified on the command line:
    # env: { test | production }
  
  tasks:
    
    - name: EC2 - Provision Security Group 'ssh-all'
      ec2_group:
        name: ssh-all
        description: Allows incoming traffic on port 22 (from all IPs).
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    
    - name: EC2 - Provision Instances 'Demo'
      ec2:
        key_name: "{{ ec2_key_name }}"
        group: 
          - ssh-all
        instance_type: t2.micro
        image: "{{ ami_id_ubuntu }}"
        region: "{{ region }}"
        wait: true
        exact_count: 5
        count_tag:
          Name: Demo
          environment: "{{ env }}"
        instance_tags:
          Name: Demo
          environment: "{{ env }}"
      register: ec2
    
    - name: EC2 - Wait for SSH on New Instances, then Refresh Inventory
      wait_for: host={{ item.public_ip }} search_regex=OpenSSH port=22 state=started
      with_items: ec2.instances
  
    # This task won't print anything out but can take a few minutes. That may 
    # make the previous task look like it's taking awhile. Oh well.
    # Note: Must set 'cache_max_age = 0' in ec2.ini for this to actually work.
    - name: Inventory - Refresh
      meta: refresh_inventory

- hosts: tag_environment_{{ env }}
  name: AWS - Configure EC2 Instances
  user: ubuntu
  gather_facts: true

  tasks:
    
    - name: Check Service 'acpid'
      service: name=acpid state=started

