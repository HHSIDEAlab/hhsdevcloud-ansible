---
# This playbook provisions the AWS resources for the HHS Dev Cloud's 
# development infrastructure.
#
# Usage: This playbook should be run as follows:
#
#     $ ansible-playbook provision.yml --extra-vars "provisioned_inventory={ hosts_test | hosts_production } ec2_key_name=hhs-dev-karlmdavis env=test" 

- hosts: localhost
  name: AWS - Provision Resources and Instances
  connection: local
  gather_facts: false
  
  tasks:
    
    - name: Local - whoami
      local_action: command whoami
      register: whoami
    
    - name: EC2 - Provision Security Group 'ssh-all'
      ec2_group:
        name: ssh-all
        description: Allows incoming traffic on port 22 (from all IPs).
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    
    - name: EC2 - Provision Security Group 'http-all'
      ec2_group:
        name: http-all
        description: Allows incoming traffic on port 80 (from all IPs).
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    
    - name: EC2 - Provision Security Group 'https-all'
      ec2_group:
        name: https-all
        description: Allows incoming traffic on port 443 (from all IPs).
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: RDS - Provision 'postgres-dev'
      rds:
        command: create
        region: "{{ region }}"
        instance_name: "{{ postgres_dev_instance_name }}"
        db_engine: postgres
        size: 10
        instance_type: db.t2.medium
        publicly_accessible: false
        username: "{{ postgres_dev_master_username }}"
        password: "{{ postgres_dev_master_password }}"
        tags:
          # Note: See https://github.com/ansible/ansible/issues/14464
          Environment: "{{ env }}"
          CreatedBy: "{{ whoami.stdout }}"
          Backup: ''
        wait: true
        wait_timeout: 900
      register: rds_dev
    
    - name: RDS - Add Instance to Inventory
      lineinfile:
        dest: "{{ provisioned_inventory }}"
        regexp: "^postgres-dev .*$"
        line: "postgres-dev rds_instance_name={{ postgres_dev_instance_name }} endpoint={{ rds_dev.instance.endpoint }} port={{ rds_dev.instance.port }}"
        state: present
        create: true

    - name: EC2 - Provision 'ldap'
      ec2:
        key_name: "{{ ec2_key_name }}"
        group:
          - default
          - ssh-all
        instance_type: t2.micro
        image: "{{ ami_id_ubuntu_16 }}"
        region: "{{ region }}"
        user_data: |
                   #!/bin/sh
                   # Ansible 2.2 only (officially) supports Python 2.7, while Ubuntu 16 has Python 3.x by default.
                   sudo apt-get update
                   sudo apt-get install --assume-yes python2.7
        wait: true
        exact_count: 1
        count_tag:
          Name: ldap
          Environment: "{{ env }}"
        instance_tags:
          Name: ldap
          Environment: "{{ env }}"
          CreatedBy: "{{ whoami.stdout }}"
          Backup: ''
      register: ec2_ldap
    
    - name: EC2 - Add 'ldap' to Inventory
      lineinfile:
        dest: "{{ provisioned_inventory }}"
        regexp: '^ldap .*$'
        line: "ldap ansible_host={{ ec2_ldap.instances[0].public_dns_name }} ec2_instance_id={{ ec2_ldap.instance_ids[0] }} ec2_private_dns_name={{ ec2_ldap.instances[0].private_dns_name }} ansible_user=ubuntu ansible_python_interpreter=/usr/bin/python2.7"
        state: present
        create: true
      when: ec2_ldap.changed

    - name: EC2 - Provision 'jira'
      ec2:
        key_name: "{{ ec2_key_name }}"
        group:
          - default
          - ssh-all

        # JIRA Recommended System Requirements (<= 5000 issues): 2+ vCPUs, 2+GB RAM, 10GB-50GB disk
        # Reference: https://confluence.atlassian.com/jira/jira-requirements-185729596.html#JIRARequirements-JIRAServerHardwareRecommendationforProduction
        # This instance type has 2 vCPUs and 4GB RAM
        instance_type: t2.medium

        image: "{{ ami_id_ubuntu_16 }}"
        region: "{{ region }}"
        user_data: |
                   #!/bin/sh
                   # Ansible 2.2 only (officially) supports Python 2.7, while Ubuntu 16 has Python 3.x by default.
                   sudo apt-get update
                   sudo apt-get install --assume-yes python2.7
        wait: true
        exact_count: 1
        count_tag:
          Name: jira
          Environment: "{{ env }}"
        instance_tags:
          Name: jira
          Environment: "{{ env }}"
          CreatedBy: "{{ whoami.stdout }}"
          Backup: ''
      register: ec2_jira
    
    - name: EC2 - Add 'jira' to Inventory
      lineinfile:
        dest: "{{ provisioned_inventory }}"
        regexp: '^jira .*$'
        line: "jira ansible_host={{ ec2_jira.instances[0].public_dns_name }} ec2_instance_id={{ ec2_jira.instance_ids[0] }} ec2_private_dns_name={{ ec2_jira.instances[0].private_dns_name }} ansible_user=ubuntu ansible_python_interpreter=/usr/bin/python2.7"
        state: present
        create: true
      when: ec2_jira.changed

    - name: EC2 - Provision 'jenkins-master'
      ec2:
        key_name: "{{ ec2_key_name }}"
        group:
          - default
          - ssh-all
          - http-all
        # 2 vCPUs, 4 GB RAM, $0.052 / h ($38.07 / mo)
        instance_type: t2.medium
        image: "{{ ami_id_ubuntu_16 }}"
        region: "{{ region }}"
        # This box started off life at 10G, and very quickly blew through that.
        volumes:
          - device_name: /dev/xvda
            volume_type: gp2
            volume_size: 200
        user_data: |
                   #!/bin/sh
                   # Ansible 2.2 only (officially) supports Python 2.7, while Ubuntu 16 has Python 3.x by default.
                   sudo apt-get update
                   sudo apt-get install --assume-yes python2.7
        wait: true
        exact_count: 1
        count_tag:
          Name: jenkins-master
          Environment: "{{ env }}"
        instance_tags:
          Name: jenkins-master
          Environment: "{{ env }}"
          CreatedBy: "{{ whoami.stdout }}"
          Backup: ''
      register: ec2_jenkins_master
    
    - name: EC2 - Add 'jenkins-master' to Inventory
      lineinfile:
        dest: "{{ provisioned_inventory }}"
        regexp: '^jenkins-master .*$'
        line: "jenkins-master ansible_host={{ ec2_jenkins_master.instances[0].public_dns_name }} ec2_instance_id={{ ec2_jenkins_master.instance_ids[0] }} ec2_private_dns_name={{ ec2_jenkins_master.instances[0].private_dns_name }} ansible_user=ubuntu ansible_python_interpreter=/usr/bin/python2.7"
        state: present
        create: true
      when: ec2_jenkins_master.changed

    - name: EC2 - Provision 'nginx-dev'
      ec2:
        key_name: "{{ ec2_key_name }}"
        group:
          - default
          - ssh-all
          - http-all
          - https-all
        instance_type: t2.micro
        image: "{{ ami_id_ubuntu_16 }}"
        region: "{{ region }}"
        user_data: |
                   #!/bin/sh
                   # Ansible 2.2 only (officially) supports Python 2.7, while Ubuntu 16 has Python 3.x by default.
                   sudo apt-get update
                   sudo apt-get install --assume-yes python2.7
        wait: true
        exact_count: 1
        count_tag:
          Name: nginx-dev
          Environment: "{{ env }}"
        instance_tags:
          Name: nginx-dev
          Environment: "{{ env }}"
          CreatedBy: "{{ whoami.stdout }}"
          Backup: ''
      register: ec2_nginx_dev
    
    - name: EC2 - Add 'nginx-dev' to Inventory
      lineinfile:
        dest: "{{ provisioned_inventory }}"
        regexp: '^nginx-dev .*$'
        line: "nginx-dev ansible_host={{ ec2_nginx_dev.instances[0].public_dns_name }} ec2_instance_id={{ ec2_nginx_dev.instance_ids[0] }} ec2_public_dns_name={{ ec2_nginx_dev.instances[0].public_dns_name }} ec2_private_dns_name={{ ec2_nginx_dev.instances[0].private_dns_name }} ansible_user=ubuntu ansible_python_interpreter=/usr/bin/python2.7"
        state: present
        create: true
      when: ec2_nginx_dev.changed
    
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        search_regex: OpenSSH
        state: started
        # This delay seems to be necessary for the last newly-provisioned 
        # instance. SSH is up for it, but it's not immediately configured to 
        # accept the SSH key.
        delay: 30
        timeout: 320
      with_flattened:
        - "{{ ec2_ldap.instances }}"
        - "{{ ec2_jira.instances }}"
        - "{{ ec2_jenkins_master.instances }}"
        - "{{ ec2_nginx_dev.instances }}"

